
//‚å¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
//‚îÉ  ‡ºí ùë´ùë¨ùëΩùë¨ùë≥ùë∂ùë∑ùë¨ùë´ ùë©ùíÄ ùëØùë¨ùëµùëπùíÄ ùë®ùëπùë™ùë®ùëµùëÆùë¨ùë≥ùë∂  ‡ºí
//‚îÉ‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà
//‚îÉ ‚úû‡¶î‡ß£ ùôøùöïùöéùöäùöúùöé ùöåùöõùöéùöçùöíùöù ùöíùöè ùö¢ùöòùöû ùöûùöúùöé ùöùùöëùöé ùöåùöòùöçùöé ‡¶î‡ß£‚úû
//‚îÉ ñ§ç ùòæùô§ùô£ùô©ùôñùôòùô©-ùô¢ùôö ùôõùô§ùôß ùôñùô£ùôÆ ùôôùô§ùô™ùôóùô©
// ‚ï∞‚îÄ...‚å¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


const handler = async (m, {conn, participants, groupMetadata,isAdmin, isOwner, text, args, usedPrefix, command, reply}) => {
  const currentTime = new Date().getTime() 
  let delayBetweenQuestions = 60000
  if(!(isAdmin || isOwner) && global.db.data.chats[m.chat].jogos===false){
   m.react("‚ùå")
   
   return !0;
 } 

 function getCurrentDate(format) {
  const options = { year: 'numeric', month: '2-digit', day: '2-digit' };
  const date = new Date();
  return format === 'pt' ? date.toLocaleDateString('pt-BR', options) : date.toLocaleDateString('en-US', options);
}
   m.react('üíΩ')
   
    const date = getCurrentDate(global.db.data.chats[m.chat].language);


  if(!global.xppergunta){
    global.xppergunta = {}
  }
  
  if(global.xppergunta[m.chat]){
    global.xppergunta[m.chat]=false
  }
  if(!global.quiz ) global.quiz  = {}
  if(!global.quizxp ) global.quizxp  = {}
  if(!global.db.data.chats[m.chat].quiz) global.db.data.chats[m.chat].quiz  = {}
  if(!global.quizxp[m.chat] ) global.quizxp[m.chat]  = {}
  
  
global.db.data.chats[m.chat].quiz = global.db.data.chats[m.chat].quiz ? global.db.data.chats[m.chat].quiz : {}
global.quizxp[m.chat] = global.quizxp[m.chat] ? global.quizxp[m.chat] : {}

global.xppergunta[m.chat]= global.xppergunta[m.chat] ? global.xppergunta[m.chat] : false
if(!global.db.data.chats[m.chat].quiz){
  global.db.data.chats[m.chat].quiz=  {
    perguntaAndamento: false,
    pergunta: {}
  }
}
if (global.db.data.chats[m.chat].quiz.perguntaAndamento === undefined) {
    global.db.data.chats[m.chat].quiz.perguntaAndamento = false;
}
if (global.db.data.chats[m.chat].quiz.loading === undefined) {
    global.db.data.chats[m.chat].quiz.loading = false;
}
if (global.db.data.chats[m.chat].quiz.modo === undefined || !global.db.data.chats[m.chat].quiz.modo) {
    global.db.data.chats[m.chat].quiz.modo = true;
}


function pickRandom(list) {
return list[Math.floor(list.length * Math.random())]}



  const categories = global.db.data.chats[m.chat].language === 'en' ? [
    'General',
    'History',
    'Mythology',
    'Art',
    'Technology',
    'Computer Science',
    'Programming',
    'Physics',
    'Chemistry',
    'Biology',
    'Mathematics',
    'Music',
    'Philosophy',
    'Literature',
    'Medicine',
    'Economics',
    'Politics',
    'Astronomy',
    'Psychology',
    'Sociology',
    'Archaeology',
    'Criminology',
    'Photography',
    'Culture',
    'Law'
] : [
    'Geral',
    'Hist√≥ria',
    'Mitologia',
    'Arte',
    'Tecnologia',
    'Inform√°tica',
    'Programa√ß√£o',
    'F√≠sica',
    'Qu√≠mica',
    'Biologia',
    'Matem√°tica',
    'M√∫sica',
    'Filosofia',
    'Literatura',
    'Medicina',
    'Economia',
    'Pol√≠tica',
    'Astronomia',
    'Psicologia',
    'Sociologia',
    'Arqueologia',
    'Criminologia',
    'Fotografia',
    'Cultura',
    'Direito'
];
  

const categoryList = categories.map((category, index) => `> ${usedPrefix + command} ${index + 1} - ${category}`).join('\n');


const quizHelp = global.idioma === 'en' ?

  `‚îå‚îÄ‚îÄ[ ùó•ùù£ùù†ùó£ùóòùó• ùë£${vs} ]‚îÄ[~]‚îÄ[${date}] 
‚îî‚îÄ $ node quiz.mjs --help
> . . . . . . . . . . . . . . . . . . . . . . .
/// I…¥…™·¥õ…™·¥Ä·¥õ…™…¥…¢ ·¥ã…¥·¥è·¥° ü·¥á·¥Ö…¢·¥á ·¥á·¥†·¥Ä ü·¥ú·¥Ä·¥õ…™·¥è…¥.
> [-] s·¥á ü·¥á·¥Ñ·¥õ ·¥Ä …¥·¥ú·¥ç ô·¥á Ä Íú∞ Ä·¥è·¥ç ·¥õ ú·¥á ·¥Ñ·¥Ä·¥õ·¥á…¢·¥è Ä…™·¥ás  ô·¥á ü·¥è·¥° ·¥õ·¥è ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥á.
> [-] T·¥è  Ä·¥á·¥†·¥á·¥Ä ü ·¥õ ú·¥á ·¥Ä…¥s·¥°·¥á Ä, ·¥ús·¥á '.ùóäùóéùóÇùóì ùóã'. 
> ‚Äé 
[*]  ü·¥è·¥Ä·¥Ö…™…¥…¢. . . .
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
${categoryList}
> ‚Äé 
> ‚ù¨‚ù¨ùñ§ùñÆùñ•
` :
 `‚îå‚îÄ‚îÄ[ ùó•ùù£ùù†ùó£ùóòùó• ùë£${vs} ]‚îÄ[~]‚îÄ[${date}] 
‚îî‚îÄ $ node quiz.mjs --help
> . . . . . . . . . . . . . . . . . . . . . . .
/// I…¥…™·¥Ñ…™·¥Ä…¥·¥Ö·¥è ·¥ç·¥è·¥Ö·¥ú ü·¥è ·¥Ö·¥á «´·¥ú…™·¥¢.
> [-] S·¥á ü·¥á·¥Ñ…™·¥è…¥·¥á ·¥ú·¥ç …¥·¥úÃÅ·¥ç·¥á Ä·¥è ·¥Ö·¥Äs ·¥Ñ·¥Ä·¥õ·¥á…¢·¥è Ä…™·¥Äs ·¥Ä ô·¥Ä…™x·¥è ·¥ò·¥Ä Ä·¥Ä ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥Ä Ä.
> [-] P·¥Ä Ä·¥Ä  Ä·¥á·¥†·¥á ü·¥Ä Ä ·¥Ä  Ä·¥ás·¥ò·¥ès·¥õ·¥Ä, ·¥ús·¥á '.ùóäùóéùóÇùóì ùóã'. 
> ‚Äé 
[*] ·¥Ñ·¥Ä Ä Ä·¥á…¢·¥Ä…¥·¥Ö·¥è . . . .
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
${categoryList}
> ‚Äé 
> ‚ù¨‚ù¨ùñ§ùñÆùñ•` 



if (!text) {
    

   
  
    throw quizHelp
}
else {
  
  
  
    const selectedCategoryIndex = parseInt(text) - 1;
    
     
    if (selectedCategoryIndex >= 0 && selectedCategoryIndex < categories.length) {
   
       
  
        
   // Assuming you have these variables defined somewhere in your script
if(!global.db.data.chats[m.chat].quiz.modo){
  global.db.data.chats[m.chat].quiz.modo =false
}

// Your existing code...

const selectedCategory = categories[selectedCategoryIndex];

global.db.data.chats[m.chat].quiz.categoria = selectedCategory



  const timeDifference = currentTime - global.db.data.chats[m.chat].quiz.time;
 
  if (!global.db.data.chats[m.chat].quiz.modo && timeDifference < delayBetweenQuestions) {
    // If the user attempts to ask a question too soon, provide a warning
    const remainingTime = delayBetweenQuestions - timeDifference;
    
    const remainingTimeInSeconds = Math.ceil(remainingTime / 1000);


const timing  = global.db.data.chats[m.chat].language === 'en' ? 
`> ‚´ª ìâòùÜºìâù ùôéùôÆùô®ùô©ùôöùô¢ ùô¨ùôñùôßùô£ùôûùô£ùôú
> 100%  ü·¥èss.
> P ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ ${remainingTimeInSeconds} s·¥á·¥Ñ·¥ènds.`
:
`> ‚´ª ìâòùÜºìâù ùôéùôÆùô®ùô©ùôöùô¢ ùôÄùôßùôßùô§ùôß
> 100% ·¥Ö·¥á ·¥ò·¥á Ä·¥Ö·¥Ä.
> ·¥Ä…¢·¥ú·¥Ä Ä·¥Ö·¥á ${remainingTimeInSeconds} s·¥á…¢·¥ú…¥·¥Ö·¥ès.`

return m.reply(timing)
  } 
  
if (global.db.data.chats[m.chat].quiz.modo && global.db.data.chats[m.chat].quiz.perguntaAndamento) {
   
const awaitNew  = global.db.data.chats[m.chat].language === 'en' ? 
`> ‚´ª ìâòùÜºìâù ùôéùôÆùô®ùô©ùôöùô¢ ùô¨ùôñùôßùô£ùôûùô£ùôú
> [*] ·¥ò·¥á…¥·¥Ö…™…¥…¢ ·¥ò…™·¥Ö
> [!] ·¥ò Ä·¥á·¥†…™·¥è·¥ús «´·¥ú·¥ás·¥õ…™·¥è…¥ ·¥ç·¥ús·¥õ  ô·¥á ·¥Ä…¥s·¥°·¥á Ä·¥á·¥Ö  ô·¥áÍú∞·¥è Ä·¥á …¥·¥á·¥° …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™·¥è…¥
> [!] ·¥õ·¥è ·¥ã…™ ü ü ·¥ò Ä·¥è·¥Ñ·¥áss, ·¥ús·¥á '.quiz delete `
:
`> ‚´ª ìâòùÜºìâù ùôéùôÆùô®ùô©ùôöùô¢ ùô¨ùôñùôßùô£ùôûùô£ùôú
> [*] ·¥ò…™·¥Ö ·¥á·¥ç ·¥Ä…¥·¥Ö·¥Ä·¥ç·¥á…¥·¥õ·¥è
> [!] ·¥ú ü·¥õ…™·¥ç·¥Ä ·¥ò·¥á Ä…¢·¥ú…¥·¥õ·¥Ä ·¥Ö·¥á·¥†·¥á s·¥á Ä  Ä·¥ás·¥ò·¥è…¥·¥Ö…™·¥Ö·¥Ä ·¥Ä…¥·¥õ·¥ás ·¥Ö·¥á …¢·¥á Ä·¥Ä Ä ·¥ú·¥ç·¥Ä …¥·¥è·¥†·¥Ä
> [!] ·¥ò·¥Ä Ä·¥Ä ·¥á…¥·¥Ñ·¥á Ä Ä·¥Ä Ä ·¥Ä ·¥õ·¥Ä Ä·¥áÍú∞·¥Ä, ·¥ús·¥á'.quiz apagar `  

return m.reply(awaitNew)
  }
  if(global.db.data.chats[m.chat].quiz.loading===true){

    const onWait  = global.db.data.chats[m.chat].language === 'en' ? 
`> ‚´ª ìâòùÜºìâù ùôéùôÆùô®ùô©ùôöùô¢ ùô¨ùôñùôßùô£ùôûùô£ùôú
> [*] ·¥ò·¥á…¥·¥Ö…™…¥…¢ ·¥ò…™·¥Ö
> [!] «´·¥ú·¥ás·¥õ…™·¥è…¥  ô·¥á…™…¥…¢ …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á·¥Ö, ·¥°·¥Ä…™·¥õ
> [!] …™Íú∞ ·¥ò Ä·¥è·¥Ñ·¥Ñ·¥áss …™s s·¥õ·¥ú·¥Ñ·¥ã, ·¥ús·¥á '.quiz delete`
:
`> ‚´ª ìâòùÜºìâù ùôéùôÆùô®ùô©ùôöùô¢ ùô¨ùôñùôßùô£ùôûùô£ùôú
> [*] ·¥ò…™·¥Ö ·¥á·¥ç ·¥Ä…¥·¥Ö·¥Ä·¥ç·¥á…¥·¥õ·¥è
> [!] …¢·¥á Ä·¥Ä…¥·¥Ö·¥è ·¥ò·¥á Ä…¢·¥ú…¥·¥õ·¥Ä
> [!] s·¥á ·¥Ä ·¥õ·¥Ä Ä·¥áÍú∞·¥Ä ·¥ás·¥õ…™·¥†·¥á Ä ·¥Ñ·¥è·¥ç  ô·¥ú…¢, ·¥ús·¥á'.quiz apagar`  
  

    return m.reply(onWait);
  }
     m.react("‚è≥")
 global.db.data.chats[m.chat].quiz.loading=true
if (!global.db.data.chats[m.chat].quiz.historico ||
global.db.data.chats[m.chat].quiz.historico.length === 0){
  global.db.data.chats[m.chat].quiz.historico  = [

    {
        "role": "system",
        "content": `Voce √© uma IA assistente para gerar quiz, perguntas e vestibulares
voce deve criar objetos em JS para perguntas, con alternativas, resposta e explica√ß√£o seguindo este modelo:


       { 
         Pergunta: 'Pergunta dentro do TEMA DA CATEGORIA',
    Opcoes: {
      A: 'Opcao',
      B: 'Opcao',
      C: 'Opcao',
      D: 'Opcao'
    },
    Pontos: 'Valor de acordo com a dificuldade',
     Money: 'Valor por dificuldade',
     XP: 'Valor por dificuldade',
    Resposta: 'Opcao certa A, B, C ou D',
    Motivo: 'Explicacao detalhada da resposta'
  }


Retorne UM OBJETO JSON COMO PLAIN TEXT E NADA MAIS!!!
no atributo Resposta, voce deve colocar apenas a letra certa!!
FACA AS PERGUNTAS NO IDIOMA DA CATEGORIA E DO USUARIO!!! 
SE A CATEGORIA √â INGLES, A PERGUNTA √â EM INGLES
SE A CATEGORIA √â EM PORTUGUES, A PERGUNTA √â EM PORTUGUES
faca perguntas dificeis e complexas adequadas a um vestibular referente ao tema
Ajuste o valor de Pontos, Money e XP de acordo com a complexidade e tema da
, os valores minimos sao 25 pontos, 50 Money e 200xp, faca os valores serem
dinamicos e variaveis conforme a complexidade!
Evite repetir as mesmas perguntas`
    },
    ]
}
 global.db.data.chats[m.chat].quiz.historico = [
...global.db.data.chats[m.chat].quiz.historico,

    {
        "role": "user",
        "content": `Agora siga as instrucoes que te foram dada  e crie o objeto JSON de uma pergunta com os MESNMOS CAMPOS/PROPRIEDADES no exemplo!!! { Pergunta: \"Pergunta dentro do TEMA DA CATEGORIA\", Opcoes: { A: \"Opcao\", B: \"Opcao\", C: \"Opcao\", D: \"Opcao\" }, Pontos: \"Valor de acordo com a dificuldade\", Money: \"Valor por dificuldade\", XP: \"Valor por dificuldade\", Resposta: \"Opcao certa A, B, C ou D\", Motivo: \"Explicacao detalhada da resposta\" } Retorne APENAS UM OBJETO JSON E MAIS NADA! use o \" nas propriedades do objeto. o usuario ira lhe passar a categoria que deseja, e voce deve gerar uma pergunta baseada no IDIOMA da categoria!! Se for SCIENCE, a pergunta deve ser ingles. Se for CIENCIA, a pergunta deve ser portugues. Se for MEDICINE, deve ser em ingles. se for MEDICINA, deve ser em portugues, etc.
       
       ${global.db.data.chats[m.chat].quiz.categoria
        == 'Historia' ? `Unifica√ß√£o do Egito (Hist√≥ria Antiga), Revolu√ß√£o
        Francesa (Hist√≥ria Moderna), Descobrimento do Brasil (Hist√≥ria do
        Brasil), Revolu√ß√£o Industrial (Hist√≥ria Econ√¥mica), Primeira Guerra
        Mundial (Hist√≥ria Contempor√¢nea), Queda de Constantinopla (Hist√≥ria
        Medieval), Guerra Fria (Hist√≥ria Pol√≠tica), Aboli√ß√£o da Escravatura
        (Hist√≥ria Social), Reforma Protestante (Hist√≥ria Religiosa), Civiliza√ß√£o
        Maia (Hist√≥ria da Am√©rica Latina), Revolta dos B√∫zios (Hist√≥ria da
        Bahia), Independ√™ncia dos Estados Unidos (Hist√≥ria das Am√©ricas),
        Imp√©rio Napole√¥nico (Hist√≥ria Militar), Invas√µes B√°rbaras (Hist√≥ria da
        Europa), Era Meiji no Jap√£o (Hist√≥ria da √Åsia), Independ√™ncia da √çndia
        (Hist√≥ria Colonial), Guerra do Paraguai (Hist√≥ria da Am√©rica do Sul),
        Revolta de Esp√°rtaco (Hist√≥ria da Roma Antiga), Reforma Agr√°ria no
        Brasil (Hist√≥ria Agr√°ria), Revolu√ß√£o Russa (Hist√≥ria do S√©culo XX),
        Expans√£o Isl√¢mica (Hist√≥ria do Oriente M√©dio), Inquisi√ß√£o Espanhola
        (Hist√≥ria da Religi√£o), Primeiras Civiliza√ß√µes Mesopot√¢micas (Hist√≥ria
        Pr√©-Hist√≥rica), Confer√™ncia de Berlim (Hist√≥ria da √Åfrica), Queda do
        Muro de Berlim (Hist√≥ria do P√≥s-Guerra), Guerras M√©dicas (Hist√≥ria da
        Gr√©cia Antiga), Renascimento Cultural (Hist√≥ria da Arte), Revolu√ß√£o
        Haitiana (Hist√≥ria da Am√©rica Central), Tratado de Tordesilhas (Hist√≥ria
        Diplom√°tica), Guerra do Vietn√£ (Hist√≥ria dos Conflitos). e muito mais` : ''}
  NAO MANDE PERGUNTAS SEMELHANTES AUE VOCE JA TENHA ME ENVIADO, SEJA CRIATIVO E
 CRIE perguntas complexas e didiceis, finja que isto e um vestibular da maior
 faculdade que h√°, o vestibular tem que ser dificil
        Categoria:
        [${global.db.data.chats[m.chat].quiz.categoria}${global.db.data.chats[m.chat].quiz.categoria
        == 'Historia' ? ' Geral - Tudo sobre historia' : ''}]`
    }
 ]
 
 console.log('begin quiz')

 async function getRobot(messagem,category) { 
   
  messagem.push({
    "role": "user",
    "content": `${category}`
  });
 
  try {
      m.react('üíø')
      const response = await fetch(global.arcangeloAPI + '/aiQuiz', {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json',
          },
          body: JSON.stringify({
              conversation: messagem,
              question: category,
          }),
      });
      if (!response.ok) {
          throw new Error('Network response was not ok ' + response.statusText);
      }
      

      const data = await response.json()

      const assistantResponse = data.response; 
      const rawResponse = assistantResponse.replace(/```json\s*/i, '').replace(/```/g, '').trim();

  let aiReply = rawResponse
     /* 
      
*/




      messagem.push({
        "role": "assistant",
        "content": `${aiReply}`
      });
         m.react('üìÄ')
         console.log('question added')
         global.db.data.chats[m.chat].quiz.pergunta = aiReply

         

  if(global.db.data.chats[m.chat].quiz.modo==false){
    console.log('Modo xp false')
  if(global.db.data.chats[m.chat].quiz != null) {
  console.log("Current Time: " + currentTime);
  console.log("Last Question Time: " + global.db.data.chats[m.chat].quiz.time);

    const timeDifference = currentTime - global.db.data.chats[m.chat].quiz.time;
  console.log("Time Difference: " + timeDifference);
  console.log("Delay: " + delayBetweenQuestions);
console.log('time  ' + timeDifference < delayBetweenQuestions)

console.log('porra')
  if (timeDifference < delayBetweenQuestions) {
    // If the user attempts to ask a question too soon, provide a warning
    const remainingTime = delayBetweenQuestions - timeDifference;
    

    const remainingTimeInSeconds = Math.ceil(remainingTime / 1000);


    const timing  = global.db.data.chats[m.chat].language === 'en' ? 
`> ‚´ª ìâòùÜºìâù ùôéùôÆùô®ùô©ùôöùô¢ ùô¨ùôñùôßùô£ùôûùô£ùôú
> 100%  ü·¥èss.
> P ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ ${remainingTimeInSeconds} s·¥á·¥Ñ·¥ènds.`
:
`> ‚´ª ìâòùÜºìâù ùôéùôÆùô®ùô©ùôöùô¢ ùôÄùôßùôßùô§ùôß
> 100% ·¥Ö·¥á ·¥ò·¥á Ä·¥Ö·¥Ä.
> ·¥Ä…¢·¥ú·¥Ä Ä·¥Ö·¥á ${remainingTimeInSeconds} s·¥á…¢·¥ú…¥·¥Ö·¥ès.`
   return m.reply(timing)

    
  } 
  else {
    console.log(global.db.data.chats[m.chat].quiz.pergunta)
    m.react('üíø')
        console.log('1 ü¶á')
        
        
    global.db.data.chats[m.chat].quiz.pergunta = JSON.parse(global.db.data.chats[m.chat].quiz.pergunta) 
    const { Pergunta, XP,Pontos, Money, Opcoes, Resposta, Motivo } = global.db.data.chats[m.chat].quiz.pergunta
    console.log('2 ü¶á')
    console.log(global.db.data.chats[m.chat].quiz.pergunta)
    const optionsString = Object.entries(Opcoes)
      .map(([key, value]) => `> ${key}: ${value}`)
      .join("\n");
      
    console.log('3 ü¶á')

 // Update the current question and answer
    global.db.data.chats[m.chat].quiz= {
              ...global.db.data.chats[m.chat].quiz,
      "cp": Pergunta,
      "ca": Resposta,
      "cm": Motivo,
      "time": new Date().getTime(),
      loading:false
    };
    
     if (selectedCategoryIndex == 11 || selectedCategory == 'Matematica') {
     global.db.data.chats[m.chat].quiz.math = true;
    } else {
     global.db.data.chats[m.chat].quiz.math = false;
    }
    // Send the question
 
    await m.reply(`$ ./quiz.py -c ${selectedCategory} 
> ‚Äé 
> [*] ${Pergunta}
> ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨
> ‚Äé 
${optionsString}
> ‚Äé  
> ‚ù¨‚ù¨ùñ§ùñÆùñ•`);

    // Update the last question time after sending a new question
    
    // Additional code specific to your application logic can go here...
    // For example, you might want to handle user responses or perform other actions.
  }
  }
  else {
 
    global.db.data.chats[m.chat].quiz.pergunta = JSON.parse(global.db.data.chats[m.chat].quiz.pergunta)
    console.log('1 ü¶á')
    const { Pergunta, XP,Pontos, Money, Opcoes, Resposta, Motivo } = global.db.data.chats[m.chat].quiz.pergunta
    console.log('2 ü¶á')
    const optionsString = Object.entries(Opcoes)
      .map(([key, value]) => `> ${key}: ${value}`)
      .join("\n");
    console.log('3 ü¶á')

 // Update the current question and answer
    global.db.data.chats[m.chat].quiz= {
              ...global.db.data.chats[m.chat].quiz,
      "cp": Pergunta,
      "ca": Resposta,
      "cm": Motivo,
      "time": new Date().getTime(),
      loading: false
    };
    
     if (selectedCategoryIndex == 11 || selectedCategory == 'Matematica') {
     global.db.data.chats[m.chat].quiz.math = true;
    } else {
     global.db.data.chats[m.chat].quiz.math = false;
    }
    // Send the question
  
    await m.reply(`$ ./quiz.py -c ${selectedCategory} 
> ‚Äé 
> [*] ${Pergunta}
> ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨
> ‚Äé 
${optionsString}
> ‚Äé  
> ‚ù¨‚ù¨ùñ§ùñÆùñ•`);

    // Update the last question time after sending a new question
    
    // Additional code specific to your application logic can go here...
    // For example, you might want to handle user responses or perform other actions.
  
  }
 
  }
  else if(global.db.data.chats[m.chat].quiz.modo==true){
  console.log('modo xp trur')
  
    
    if(global.db.data.chats[m.chat].quiz!= null) {
 
    global.db.data.chats[m.chat].quiz.pergunta = JSON.parse(global.db.data.chats[m.chat].quiz.pergunta) 
    const { Pergunta, XP, Money, Pontos, Opcoes, Resposta, Motivo } =
    global.db.data.chats[m.chat].quiz.pergunta;
    const optionsString = Object.entries(Opcoes)
      .map(([key, value]) => `> ${key}: ${value}`)
      .join("\n");
    global.db.data.chats[m.chat].quiz.perguntaAndamento = true
    
    
    let qid = await m.reply(`$ ./quiz.py -c ${selectedCategory} 
> ‚Äé 
> [*] ${Pergunta}
> ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨
> ‚Äé 
${optionsString}
> ‚Äé  
> ‚ù¨‚ù¨ùñ§ùñÆùñ•`);

 // Update the current question and answer
    global.db.data.chats[m.chat].quiz= {
      ...global.db.data.chats[m.chat].quiz,
      "cp": Pergunta,
      "ca": Resposta,
      "cm": Motivo,
            "xp": XP,
     "pontos": Pontos,
        "mony": Money,
      "id": qid.id,
      "time": new Date().getTime(),
      loading:false
    };
    
     if (selectedCategoryIndex == 11 || selectedCategory == 'Matematica') {
     global.db.data.chats[m.chat].quiz.math = true;
    } else {
     global.db.data.chats[m.chat].quiz.math = false;
    }
    
    console.log("on quiz  "+ global.db.data.chats[m.chat].quiz)
    // Send the question
    

    // Update the last question time after sending a new question
    
    // Additional code specific to your application logic can go here...
    // For example, you might want to handle user responses or perform other actions.
  
  }
  else {
    
    global.db.data.chats[m.chat].quiz.pergunta = JSON.parse(global.db.data.chats[m.chat].quiz.pergunta)
    const { Pergunta, XP, Money, Pontos, Opcoes, Resposta, Motivo} =
    global.db.data.chats[m.chat].quiz.pergunta;
    const optionsString = Object.entries(Opcoes)
      .map(([key, value]) => `> ${key}: ${value}`)
      .join("\n");
    global.xppergunta[m.chat]= true
 // Update the current question and answer
    console.log("test" + global.db.data.chats[m.chat].quiz.modo)
    // Send the question
  global.db.data.chats[m.chat].quiz.perguntaAndamento = true
  
  


  
   let qid = await m.reply(`$ ./quiz.py -c ${selectedCategory} 
> ‚Äé 
> [*] ${Pergunta}
> ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨
> ‚Äé 
${optionsString}
> ‚Äé 
> ‚ù¨‚ù¨ùñ§ùñÆùñ•`);

global.db.data.chats[m.chat].quiz = {
        ...global.db.data.chats[m.chat].quiz,
  "math":false,
      "cp": Pergunta,
      "ca": Resposta,
      "cm": Motivo,
            "xp": XP,
     "pontos": Pontos,
        "mony": Money,
      "id": qid.id,
      "time": new Date().getTime(),
     loading: false
    };
    
    
     if (selectedCategoryIndex == 11 || selectedCategory == 'Matematica') {
     global.db.data.chats[m.chat].quiz.math = true;
    } else {
     global.db.data.chats[m.chat].quiz.math = false;
    }
    console.log("on quiz  "+ global.db.data.chats[m.chat].quiz.id)
    // Updte the last question time after sending a new question
    
    // Additional code specific to your application logic can go here...
    // For example, you might want to handle user responses or perform other actions.
  }
   //fim estado pergunta
  } // fim elseif if competitivo
  

 

         
return !0
  } catch (error) {
      console.log('erro !!!!! ')
      console.log('///////////////// ')
      console.log(error)
    sendSystemErrorAlert(global.db.data.chats[m.chat].language);
  }
   
}



getRobot(global.db.data.chats[m.chat].quiz.historico, categories[text -1])

  

}
    else if(text === "r"){
      
      
     if(!global.db.data.chats[m.chat].quiz.pergunta){

      const quizEnd = global.db.data.chats[m.chat].language === 'en' ? 
      `‚îå‚îÄ‚îÄ[ ùó•ùù£ùù†ùó£ùóòùó• ùë£${vs} ]‚îÄ‚îÄ[~/œôœÖŒπ»•] 
‚îî‚îÄ‚ñ∫ get_status -e
> ‚Äé 
[!] ·¥õ ú…™Íú± …¢·¥Ä·¥ç·¥á ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥á…¥·¥Ö·¥á·¥Ö
> ‚Äé 
` : 
      `‚îå‚îÄ‚îÄ[ ùó•ùù£ùù†ùó£ùóòùó• ùë£${vs} ]‚îÄ‚îÄ[~/œôœÖŒπ»•] 
‚îî‚îÄ‚ñ∫ get_status -e
> ‚Äé 
[!] ·¥ä·¥è…¢·¥è ·¥á…¥·¥Ñ·¥á Ä Ä·¥Ä·¥Ö·¥è
> ‚Äé 
`


        await m.reply(quizEnd)
      }
  
     else if(global.db.data.chats[m.chat].quiz.cp)
     
      {

        const getAnswer = global.db.data.chats[m.chat].language === 'en' ? 
        `‚îå‚îÄ‚îÄ[ ùó•ùù£ùù†ùó£ùóòùó• ùë£${vs} ]‚îÄ‚îÄ[~/œôœÖŒπ»•] 
‚îî‚îÄ‚ñ∫ get_reply -n
[+] ùô≤ùôæùöÅùöÅùô¥ùô≤ùöÉ ùôæùôøùöÉùô∏ùôæùôΩ: ${global.db.data.chats[m.chat].quiz.ca} 
‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨
> ${global.db.data.chats[m.chat].quiz.cm}
> ‚Äé` : 
        `‚îå‚îÄ‚îÄ[ ùó•ùù£ùù†ùó£ùóòùó• ùë£${vs} ]‚îÄ‚îÄ[~/œôœÖŒπ»•] 
‚îî‚îÄ‚ñ∫ get_reply -n
[+] ùôæùôøùô≤ùô∞ùôæ ùô≤ùôæùöÅùöÅùô¥ùöÉùô∞: ${global.db.data.chats[m.chat].quiz.ca} 
‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨
> ${global.db.data.chats[m.chat].quiz.cm}
> ‚Äé`


      await m.reply(getAnswer)
      
          global.db.data.chats[m.chat].quiz.perguntaAndamento = false
          global.db.data.chats[m.chat].quiz.pergunta = {}
      
        global.db.data.chats[m.chat].quiz= {
                  ...global.db.data.chats[m.chat].quiz,
        "math": false,
      "cp": '',
      "ca": '',
      "cm": '',
      "xp": 0,
      "id": '',
      "time": ''

    }
    
    }
    }
    
    else if(text=== 'apagar' || text=='delete'){
      m.react("‚úÖ")
      const delmsg = global.db.data.chats[m.chat].language === 'en' ? 
      `ìâò‚úììâù ·¥õ·¥Äs·¥ã ·¥ã…™ ü ü·¥á·¥Ö`
      :
      `ìâò‚úììâù ·¥ò Ä·¥è·¥Ñ·¥áss·¥è ·¥á…¥·¥Ñ·¥á Ä Ä·¥Ä·¥Ö·¥è`
      m.reply(delmsg)
      delete global.db.data.chats[m.chat].quiz
    }
    else if(text.length>3) {
   
       
  
        
if(!global.db.data.chats[m.chat].quiz.modo){
  global.db.data.chats[m.chat].quiz.modo =false
}

const selectedCategory = text

global.db.data.chats[m.chat].quiz.categoria = selectedCategory



  const timeDifference = currentTime - global.db.data.chats[m.chat].quiz.time;
 
  if (!global.db.data.chats[m.chat].quiz.modo && timeDifference < delayBetweenQuestions) {
    // If the user attempts to ask a question too soon, provide a warning
    const remainingTime = delayBetweenQuestions - timeDifference;
    
    const remainingTimeInSeconds = Math.ceil(remainingTime / 1000);


const timing  = global.db.data.chats[m.chat].language === 'en' ? 
`> ‚´ª ìâòùÜºìâù ùôéùôÆùô®ùô©ùôöùô¢ ùô¨ùôñùôßùô£ùôûùô£ùôú
> 100%  ü·¥èss.
> P ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ ${remainingTimeInSeconds} s·¥á·¥Ñ·¥ènds.`
:
`> ‚´ª ìâòùÜºìâù ùôéùôÆùô®ùô©ùôöùô¢ ùôÄùôßùôßùô§ùôß
> 100% ·¥Ö·¥á ·¥ò·¥á Ä·¥Ö·¥Ä.
> ·¥Ä…¢·¥ú·¥Ä Ä·¥Ö·¥á ${remainingTimeInSeconds} s·¥á…¢·¥ú…¥·¥Ö·¥ès.`
   return m.reply(timing)
  } 
  
if (global.db.data.chats[m.chat].quiz.modo && global.db.data.chats[m.chat].quiz.perguntaAndamento) {
   
const awaitNew  = global.db.data.chats[m.chat].language === 'en' ? 
`> ‚´ª ìâòùÜºìâù ùôéùôÆùô®ùô©ùôöùô¢ ùô¨ùôñùôßùô£ùôûùô£ùôú
> [*] ·¥ò·¥á…¥·¥Ö…™…¥…¢ ·¥ò…™·¥Ö
> [!] ·¥ò Ä·¥á·¥†…™·¥è·¥ús «´·¥ú·¥ás·¥õ…™·¥è…¥ ·¥ç·¥ús·¥õ  ô·¥á ·¥Ä…¥s·¥°·¥á Ä·¥á·¥Ö  ô·¥áÍú∞·¥è Ä·¥á …¥·¥á·¥° …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™·¥è…¥
> [!] ·¥õ·¥è ·¥ã…™ ü ü ·¥ò Ä·¥è·¥Ñ·¥áss, ·¥ús·¥á '.quiz delete `
:
`> ‚´ª ìâòùÜºìâù ùôéùôÆùô®ùô©ùôöùô¢ ùô¨ùôñùôßùô£ùôûùô£ùôú
> [*] ·¥ò…™·¥Ö ·¥á·¥ç ·¥Ä…¥·¥Ö·¥Ä·¥ç·¥á…¥·¥õ·¥è
> [!] ·¥ú ü·¥õ…™·¥ç·¥Ä ·¥ò·¥á Ä…¢·¥ú…¥·¥õ·¥Ä ·¥Ö·¥á·¥†·¥á s·¥á Ä  Ä·¥ás·¥ò·¥è…¥·¥Ö…™·¥Ö·¥Ä ·¥Ä…¥·¥õ·¥ás ·¥Ö·¥á …¢·¥á Ä·¥Ä Ä ·¥ú·¥ç·¥Ä …¥·¥è·¥†·¥Ä
> [!] ·¥ò·¥Ä Ä·¥Ä ·¥á…¥·¥Ñ·¥á Ä Ä·¥Ä Ä ·¥Ä ·¥õ·¥Ä Ä·¥áÍú∞·¥Ä, ·¥ús·¥á'.quiz apagar `

return m.reply(awaitNew)
  }
  if(global.db.data.chats[m.chat].quiz.loading===true){

    const onWait  = global.db.data.chats[m.chat].language === 'en' ? 
`> ‚´ª ìâòùÜºìâù ùôéùôÆùô®ùô©ùôöùô¢ ùô¨ùôñùôßùô£ùôûùô£ùôú
> [*] ·¥ò·¥á…¥·¥Ö…™…¥…¢ ·¥ò…™·¥Ö
> [!] «´·¥ú·¥ás·¥õ…™·¥è…¥  ô·¥á…™…¥…¢ …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á·¥Ö, ·¥°·¥Ä…™·¥õ
> [!] …™Íú∞ ·¥ò Ä·¥è·¥Ñ·¥Ñ·¥áss …™s s·¥õ·¥ú·¥Ñ·¥ã, ·¥ús·¥á '.quiz delete`
:
`> ‚´ª ìâòùÜºìâù ùôéùôÆùô®ùô©ùôöùô¢ ùô¨ùôñùôßùô£ùôûùô£ùôú
> [*] ·¥ò…™·¥Ö ·¥á·¥ç ·¥Ä…¥·¥Ö·¥Ä·¥ç·¥á…¥·¥õ·¥è
> [!] …¢·¥á Ä·¥Ä…¥·¥Ö·¥è ·¥ò·¥á Ä…¢·¥ú…¥·¥õ·¥Ä
> [!] s·¥á ·¥Ä ·¥õ·¥Ä Ä·¥áÍú∞·¥Ä ·¥ás·¥õ…™·¥†·¥á Ä ·¥Ñ·¥è·¥ç  ô·¥ú…¢, ·¥ús·¥á'.quiz apagar`  


    return m.reply(onWait);
  }
     m.react("‚è≥")
 global.db.data.chats[m.chat].quiz.loading=true
if (!global.db.data.chats[m.chat].quiz.historico ||
global.db.data.chats[m.chat].quiz.historico.length === 0){
  global.db.data.chats[m.chat].quiz.historico  = [

    {
        "role": "system",
        "content": `Voce √© uma IA assistente para gerar quiz, perguntas e vestibulares
voce deve criar objetos em JS para perguntas, con alternativas, resposta e explica√ß√£o seguindo este modelo:


       { 
         Pergunta: 'Pergunta dentro do TEMA DA CATEGORIA',
    Opcoes: {
      A: 'Opcao',
      B: 'Opcao',
      C: 'Opcao',
      D: 'Opcao'
    },
    Pontos: 'Valor de acordo com a dificuldade',
     Money: 'Valor por dificuldade',
     XP: 'Valor por dificuldade',
    Resposta: 'Opcao certa A, B, C ou D',
    Motivo: 'Explicacao detalhada da resposta'
  }


Retorne UM OBJETO JSON COMO PLAIN TEXT E NADA MAIS!!!
no atributo Resposta, voce deve colocar apenas a letra certa!!
FACA AS PERGUNTAS NO IDIOMA DA CATEGORIA E DO USUARIO!!! 
SE A CATEGORIA √â INGLES, A PERGUNTA √â EM INGLES
SE A CATEGORIA √â EM PORTUGUES, A PERGUNTA √â EM PORTUGUES
faca perguntas dificeis e complexas adequadas a um vestibular referente ao tema
Ajuste o valor de Pontos, Money e XP de acordo com a complexidade e tema da
, os valores minimos sao 25 pontos, 50 Money e 200xp, faca os valores serem
dinamicos e variaveis conforme a complexidade!
Evite repetir as mesmas perguntas`
    },
    ]
}
 global.db.data.chats[m.chat].quiz.historico = [
...global.db.data.chats[m.chat].quiz.historico,

    {
        "role": "user",
        "content": `Agora siga as instrucoes que te foram dada  e crie o objeto JSON de uma pergunta com os MESNMOS CAMPOS/PROPRIEDADES no exemplo!!! { Pergunta: \"Pergunta dentro do TEMA DA CATEGORIA\", Opcoes: { A: \"Opcao\", B: \"Opcao\", C: \"Opcao\", D: \"Opcao\" }, Pontos: \"Valor de acordo com a dificuldade\", Money: \"Valor por dificuldade\", XP: \"Valor por dificuldade\", Resposta: \"Opcao certa A, B, C ou D\", Motivo: \"Explicacao detalhada da resposta\" } Retorne APENAS UM OBJETO JSON E MAIS NADA! use o \" nas propriedades do objeto. o usuario ira lhe passar a categoria que deseja, e voce deve gerar uma pergunta baseada no IDIOMA da categoria!! Se for SCIENCE, a pergunta deve ser ingles. Se for CIENCIA, a pergunta deve ser portugues. Se for MEDICINE, deve ser em ingles. se for MEDICINA, deve ser em portugues, etc.
       
       ${global.db.data.chats[m.chat].quiz.categoria
        == 'Historia' ? `Unifica√ß√£o do Egito (Hist√≥ria Antiga), Revolu√ß√£o
        Francesa (Hist√≥ria Moderna), Descobrimento do Brasil (Hist√≥ria do
        Brasil), Revolu√ß√£o Industrial (Hist√≥ria Econ√¥mica), Primeira Guerra
        Mundial (Hist√≥ria Contempor√¢nea), Queda de Constantinopla (Hist√≥ria
        Medieval), Guerra Fria (Hist√≥ria Pol√≠tica), Aboli√ß√£o da Escravatura
        (Hist√≥ria Social), Reforma Protestante (Hist√≥ria Religiosa), Civiliza√ß√£o
        Maia (Hist√≥ria da Am√©rica Latina), Revolta dos B√∫zios (Hist√≥ria da
        Bahia), Independ√™ncia dos Estados Unidos (Hist√≥ria das Am√©ricas),
        Imp√©rio Napole√¥nico (Hist√≥ria Militar), Invas√µes B√°rbaras (Hist√≥ria da
        Europa), Era Meiji no Jap√£o (Hist√≥ria da √Åsia), Independ√™ncia da √çndia
        (Hist√≥ria Colonial), Guerra do Paraguai (Hist√≥ria da Am√©rica do Sul),
        Revolta de Esp√°rtaco (Hist√≥ria da Roma Antiga), Reforma Agr√°ria no
        Brasil (Hist√≥ria Agr√°ria), Revolu√ß√£o Russa (Hist√≥ria do S√©culo XX),
        Expans√£o Isl√¢mica (Hist√≥ria do Oriente M√©dio), Inquisi√ß√£o Espanhola
        (Hist√≥ria da Religi√£o), Primeiras Civiliza√ß√µes Mesopot√¢micas (Hist√≥ria
        Pr√©-Hist√≥rica), Confer√™ncia de Berlim (Hist√≥ria da √Åfrica), Queda do
        Muro de Berlim (Hist√≥ria do P√≥s-Guerra), Guerras M√©dicas (Hist√≥ria da
        Gr√©cia Antiga), Renascimento Cultural (Hist√≥ria da Arte), Revolu√ß√£o
        Haitiana (Hist√≥ria da Am√©rica Central), Tratado de Tordesilhas (Hist√≥ria
        Diplom√°tica), Guerra do Vietn√£ (Hist√≥ria dos Conflitos). e muito mais` : ''}
  NAO MANDE PERGUNTAS SEMELHANTES AUE VOCE JA TENHA ME ENVIADO, SEJA CRIATIVO E
 CRIE perguntas complexas e didiceis, finja que isto e um vestibular da maior
 faculdade que h√°, o vestibular tem que ser dificil
        Categoria:
        [${global.db.data.chats[m.chat].quiz.categoria}${global.db.data.chats[m.chat].quiz.categoria
        == 'Historia' ? ' Geral - Tudo sobre historia' : ''}]`
    }
 ]
 
 console.log('begin quiz')

 async function getRobot(messagem,category) { 
   
  messagem.push({
    "role": "user",
    "content": `${category}`
  });
 
  try {
      m.react('üíø')
      const response = await fetch(global.arcangeloAPI + '/aiQuiz', {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json',
          },
          body: JSON.stringify({
              conversation: messagem,
              question: category,
          }),
      });
      if (!response.ok) {
          throw new Error('Network response was not ok ' + response.statusText);
      }
      

      const data = await response.json()

      const assistantResponse = data.response; 
  let aiReply = assistantResponse
  
  




      messagem.push({
        "role": "assistant",
        "content": `${aiReply}`
      });
         m.react('üìÄ')
         console.log('question added')
         global.db.data.chats[m.chat].quiz.pergunta = aiReply

         

  if(global.db.data.chats[m.chat].quiz.modo==false){
    console.log('Modo xp false')
  if(global.db.data.chats[m.chat].quiz != null) {
  console.log("Current Time: " + currentTime);
  console.log("Last Question Time: " + global.db.data.chats[m.chat].quiz.time);

    const timeDifference = currentTime - global.db.data.chats[m.chat].quiz.time;
  console.log("Time Difference: " + timeDifference);
  console.log("Delay: " + delayBetweenQuestions);
console.log('time  ' + timeDifference < delayBetweenQuestions)

console.log('porra')
  if (timeDifference < delayBetweenQuestions) {
    // If the user attempts to ask a question too soon, provide a warning
    const remainingTime = delayBetweenQuestions - timeDifference;
    

    const remainingTimeInSeconds = Math.ceil(remainingTime / 1000);


    const timing  = global.db.data.chats[m.chat].language === 'en' ? 
`> ‚´ª ìâòùÜºìâù ùôéùôÆùô®ùô©ùôöùô¢ ùô¨ùôñùôßùô£ùôûùô£ùôú
> [*] ·¥ò·¥á…¥·¥Ö…™…¥…¢ ·¥ò…™·¥Ö
> [!] ·¥ò Ä·¥á·¥†…™·¥è·¥ús «´·¥ú·¥ás·¥õ…™·¥è…¥ ·¥ç·¥ús·¥õ  ô·¥á ·¥Ä…¥s·¥°·¥á Ä·¥á·¥Ö  ô·¥áÍú∞·¥è Ä·¥á …¥·¥á·¥° …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™·¥è…¥
> [!] ·¥õ·¥è ·¥ã…™ ü ü ·¥ò Ä·¥è·¥Ñ·¥áss, ·¥ús·¥á '.quiz delete `
:
`> ‚´ª ìâòùÜºìâù ùôéùôÆùô®ùô©ùôöùô¢ ùô¨ùôñùôßùô£ùôûùô£ùôú
> [*] ·¥ò…™·¥Ö ·¥á·¥ç ·¥Ä…¥·¥Ö·¥Ä·¥ç·¥á…¥·¥õ·¥è
> [!] ·¥ú ü·¥õ…™·¥ç·¥Ä ·¥ò·¥á Ä…¢·¥ú…¥·¥õ·¥Ä ·¥Ö·¥á·¥†·¥á s·¥á Ä  Ä·¥ás·¥ò·¥è…¥·¥Ö…™·¥Ö·¥Ä ·¥Ä…¥·¥õ·¥ás ·¥Ö·¥á …¢·¥á Ä·¥Ä Ä ·¥ú·¥ç·¥Ä …¥·¥è·¥†·¥Ä
> [!] ·¥ò·¥Ä Ä·¥Ä ·¥á…¥·¥Ñ·¥á Ä Ä·¥Ä Ä ·¥Ä ·¥õ·¥Ä Ä·¥áÍú∞·¥Ä, ·¥ús·¥á'.quiz apagar `
      return m.reply(timing)

    
  } 
  else {
    console.log(global.db.data.chats[m.chat].quiz.pergunta)
    m.react('üíø')
        console.log('1 ü¶á')
        
        
    global.db.data.chats[m.chat].quiz.pergunta = JSON.parse(global.db.data.chats[m.chat].quiz.pergunta) 
    const { Pergunta, XP,Pontos, Money, Opcoes, Resposta, Motivo } = global.db.data.chats[m.chat].quiz.pergunta
    console.log('2 ü¶á')
    console.log(global.db.data.chats[m.chat].quiz.pergunta)
    const optionsString = Object.entries(Opcoes)
      .map(([key, value]) => `> ${key}: ${value}`)
      .join("\n");
      
    console.log('3 ü¶á')

 // Update the current question and answer
    global.db.data.chats[m.chat].quiz= {
              ...global.db.data.chats[m.chat].quiz,
      "cp": Pergunta,
      "ca": Resposta,
      "cm": Motivo,
      "time": new Date().getTime(),
      loading:false
    };
    
     if (selectedCategoryIndex == 11 || selectedCategory == 'Matematica') {
     global.db.data.chats[m.chat].quiz.math = true;
    } else {
     global.db.data.chats[m.chat].quiz.math = false;
    }
    // Send the question
 
    await m.reply(`$ ./quiz.py -c ${selectedCategory} 
> ‚Äé 
> [*] ${Pergunta}
> ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨
> ‚Äé 
${optionsString}
> ‚Äé  
> ‚ù¨‚ù¨ùñ§ùñÆùñ•`);

    // Update the last question time after sending a new question
    
    // Additional code specific to your application logic can go here...
    // For example, you might want to handle user responses or perform other actions.
  }
  }
  else {
 
    global.db.data.chats[m.chat].quiz.pergunta = JSON.parse(global.db.data.chats[m.chat].quiz.pergunta)
    console.log('1 ü¶á')
    const { Pergunta, XP,Pontos, Money, Opcoes, Resposta, Motivo } = global.db.data.chats[m.chat].quiz.pergunta
    console.log('2 ü¶á')
    const optionsString = Object.entries(Opcoes)
      .map(([key, value]) => `> ${key}: ${value}`)
      .join("\n");
    console.log('3 ü¶á')

 // Update the current question and answer
    global.db.data.chats[m.chat].quiz= {
              ...global.db.data.chats[m.chat].quiz,
      "cp": Pergunta,
      "ca": Resposta,
      "cm": Motivo,
      "time": new Date().getTime(),
      loading: false
    };
    
     if (selectedCategoryIndex == 11 || selectedCategory == 'Matematica') {
     global.db.data.chats[m.chat].quiz.math = true;
    } else {
     global.db.data.chats[m.chat].quiz.math = false;
    }
    // Send the question
  
    await m.reply(`$ ./quiz.py -c ${selectedCategory} 
> ‚Äé 
> [*] ${Pergunta}
> ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨
> ‚Äé 
${optionsString} 
> ‚Äé  
> ‚ù¨‚ù¨ùñ§ùñÆùñ•`);

    // Update the last question time after sending a new question
    
    // Additional code specific to your application logic can go here...
    // For example, you might want to handle user responses or perform other actions.
  
  }
 
  }
  else if(global.db.data.chats[m.chat].quiz.modo==true){
  console.log('modo xp trur')
  
    
    if(global.db.data.chats[m.chat].quiz!= null) {
 
    global.db.data.chats[m.chat].quiz.pergunta = JSON.parse(global.db.data.chats[m.chat].quiz.pergunta) 
    const { Pergunta, XP, Money, Pontos, Opcoes, Resposta, Motivo } =
    global.db.data.chats[m.chat].quiz.pergunta;
    const optionsString = Object.entries(Opcoes)
      .map(([key, value]) => `> ${key}: ${value}`)
      .join("\n");
    global.db.data.chats[m.chat].quiz.perguntaAndamento = true
    
    
    let qid = await m.reply(`$ ./quiz.py -c ${selectedCategory} 
> ‚Äé 
> [*] ${Pergunta}
> ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨
> ‚Äé 
${optionsString}
> ‚Äé  
> ‚ù¨‚ù¨ùñ§ùñÆùñ•`);

 // Update the current question and answer
    global.db.data.chats[m.chat].quiz= {
      ...global.db.data.chats[m.chat].quiz,
      "cp": Pergunta,
      "ca": Resposta,
      "cm": Motivo,
            "xp": XP,
     "pontos": Pontos,
        "mony": Money,
      "id": qid.id,
      "time": new Date().getTime(),
      loading:false
    };
    
     if (selectedCategoryIndex == 11 || selectedCategory == 'Matematica') {
     global.db.data.chats[m.chat].quiz.math = true;
    } else {
     global.db.data.chats[m.chat].quiz.math = false;
    }
    
    console.log("on quiz  "+ global.db.data.chats[m.chat].quiz)
    // Send the question
    

    // Update the last question time after sending a new question
    
    // Additional code specific to your application logic can go here...
    // For example, you might want to handle user responses or perform other actions.
  
  }
  else {
    
    global.db.data.chats[m.chat].quiz.pergunta = JSON.parse(global.db.data.chats[m.chat].quiz.pergunta)
    const { Pergunta, XP, Money, Pontos, Opcoes, Resposta, Motivo} =
    global.db.data.chats[m.chat].quiz.pergunta;
    const optionsString = Object.entries(Opcoes)
      .map(([key, value]) => `> ${key}: ${value}`)
      .join("\n");
    global.xppergunta[m.chat]= true
 // Update the current question and answer
    console.log("test" + global.db.data.chats[m.chat].quiz.modo)
    // Send the question
  global.db.data.chats[m.chat].quiz.perguntaAndamento = true
  
  


  
   let qid = await m.reply(`$ ./quiz.py -c ${selectedCategory} 
> ‚Äé 
> [*] ${Pergunta}
> ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨
> ‚Äé 
${optionsString}
> ‚Äé  
> ‚ù¨‚ù¨ùñ§ùñÆùñ•`);

global.db.data.chats[m.chat].quiz = {
        ...global.db.data.chats[m.chat].quiz,
  "math":false,
      "cp": Pergunta,
      "ca": Resposta,
      "cm": Motivo,
            "xp": XP,
     "pontos": Pontos,
        "mony": Money,
      "id": qid.id,
      "time": new Date().getTime(),
     loading: false
    };
    
    
     if (selectedCategoryIndex == 11 || selectedCategory == 'Matematica') {
     global.db.data.chats[m.chat].quiz.math = true;
    } else {
     global.db.data.chats[m.chat].quiz.math = false;
    }
    console.log("on quiz  "+ global.db.data.chats[m.chat].quiz.id)
    
  }
   //fim estado pergunta
  } // fim elseif if competitivo
  

 

         
return !0
  } catch (error) {
      console.log('erro !!!!! ')
      console.log('///////////////// ')
      console.log(error)
    sendSystemErrorAlert(global.db.data.chats[m.chat].language);
  }
   
}



getRobot(global.db.data.chats[m.chat].quiz.historico, categories[text -1])

  

}
    
    
   else if (text.includes("placar")) {
console.log(global.db.data.chats[m.chat].jogadores)
  if (!global.db.data.chats[m.chat].jogadores) {
    global.db.data.chats[m.chat].jogadores = {};
  }
  let players = global.db.data.chats[m.chat].users
  
let sortedPlayers

console.log(m.chat)
console.log("CHAT")
console.log("teste inicio -------+")
console.log(players)
console.log("teste fim--------+")
const users = participants.map((u) => conn.decodeJid(u.id));
  
  

  console.log(players);
  console.log("acima e topjogadores")
  let formattedMessage = `
‚îå‚îÄ‚îÄ[ ùó•ùù£ùù†ùó£ùóòùó• ùë£${vs} ]‚îÄ‚îÄ[~/œôœÖŒπ»•] 
‚îî‚îÄ‚ñ∫ cat ranking.md
`;
let mentionedId = [];

  // Extract keys, sort by xp in descending order, and limit to top 5
  const top5Users = Object.keys(players)
    .sort((a, b) => players[b].pontos - players[a].pontos)
    .slice(0, 5);

  
  top5Users.forEach((key) => {
    const { pontos, name } = players[key];
    mentionedId.push(key);

    formattedMessage += `. . . . . . . . . . . . . 
> [+] @${key.split('@')[0]} 
> ùõå ${pontos} ${global.db.data.chats[m.chat].language === 'en' ? 'ùô•ùô§ùôûùô£ùô©ùô®' : 'ùô•ùô§ùô£ùô©ùô§ùô®'}

`;
  })

  

// Example usage

console.log('Mentioned IDs:', mentionedId);

conn.sendMessage(m.chat, { text: formattedMessage, mentions: mentionedId});

// Reset mentionedId for the next cycle
mentionedId = [];
  
  players = {}


  }

    
 
 
else {


   throw quizHelp
}
}
}

  
  

handler.help = ['curiosidades'];
handler.tags = ['tools'];
handler.command = ['quiz']

export default handler;
