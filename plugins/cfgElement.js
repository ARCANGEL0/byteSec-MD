
//‚å¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
//‚îÉ  ‡ºí ùë´ùë¨ùëΩùë¨ùë≥ùë∂ùë∑ùë¨ùë´ ùë©ùíÄ ùëØùë¨ùëµùëπùíÄ ùë®ùëπùë™ùë®ùëµùëÆùë¨ùë≥ùë∂  ‡ºí
//‚îÉ‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà
//‚îÉ ‚úû‡¶î‡ß£ ùôøùöïùöéùöäùöúùöé ùöåùöõùöéùöçùöíùöù ùöíùöè ùö¢ùöòùöû ùöûùöúùöé ùöùùöëùöé ùöåùöòùöçùöé ‡¶î‡ß£‚úû
//‚îÉ ñ§ç ùòæùô§ùô£ùô©ùôñùôòùô©-ùô¢ùôö ùôõùô§ùôß ùôñùô£ùôÆ ùôôùô§ùô™ùôóùô©
// ‚ï∞‚îÄ...‚å¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

//CREADO POR @gata_diosimport translate from '@vitalets/google-translate-api'
import translate from '@vitalets/google-translate-api' 
let handler = async (m, { conn, text, usedPrefix, command}) => {
 if (!text) throw 'Please provide an element symbol or name';
let result = await translate(`${text}`, { to: "en", autoCorrect: true })


  try {
    let res = await fetch(`https://api.popcat.xyz/periodic-table?element=${result.text}`);

    if (!res.ok) {
      throw new Error(`API status ${res.status}`);
    }

    let buffer = await res.arrayBuffer();
    let json = JSON.parse(Buffer.from(buffer).toString());

    console.log('JSON response:', json);
let nome = await translate(json.name, { to: "pt", autoCorrect: true })

let summ = await translate(json.summary, { to: "pt", autoCorrect: true })

console.log(summ)
console.log(nome)
   let elementInfo = 
   
    `             ‚õß¬∞„ÄÇ ‚ãÜ‡º∫‚ô±‡ºª‚ãÜ„ÄÇ ¬∞‚õß
    ‚öù _*Informa√ß√µes do elemento*_ ‚öù
     ‚å¨ *Nome:* ${nome.text}\n
     ‚å¨ *S√≠mbolo:* ${json.symbol}\n
     ‚å¨ *N√∫mero At√¥mico:* ${json.atomic_number}\n
     ‚å¨ *Massa At√¥mica:* ${json.atomic_mass}\n
     ‚å¨ *Per√≠odo:* ${json.period}\n
     ‚å¨ *Fase:* ${json.phase}\n
     ‚å¨ *Descoberto Por:* ${json.discovered_by}\n
     ‚å¨ *Resumo:* ${summ.text}
             ‚õß¬∞„ÄÇ ‚ãÜ‡º∫‚ò•‡ºª‚ãÜ„ÄÇ ¬∞‚õß`;



    conn.sendFile(m.chat, json.image, 'element.jpg', elementInfo, m);
  } catch (error) {
    console.error(error);
    // Handle the error appropriately
  }

}
handler.level= 25
handler.command = ['elemento']
export default handler
